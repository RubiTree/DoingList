{"ast":null,"code":"var _jsxFileName = \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TodayWorkConatiner.tsx\";\nimport 'reflect-metadata';\nimport React from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport DateUtils from '../utils/DateUtils';\nimport Format from '../utils/Format';\nconst Div = styled.div`\nheight: 50vh;\noverflow: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:rgb(227, 233, 231);\n`;\n\nconst TodayWorkConatiner = () => {\n  const {\n    storeModel\n  } = stores.useStore('mainmodel');\n\n  function getTimelines() {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0)).flatMap(task => task.note.timeLines.map(timeline => {\n      return timeline.getTitled(task.title);\n    })).sort((a, b) => {\n      if (a.timeStamp > b.timeStamp) {\n        return -1;\n      } else if (a.timeStamp < b.timeStamp) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).map(timeline => {\n      if (timeline.isDivder) {\n        return \"\";\n      } else {\n        return `${Format.formatTimeInSecond2(timeline.timeStamp)} ${timeline.content} \\n`;\n      }\n    }).join(\"\");\n  }\n\n  return /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, getTimelines());\n};\n\nexport default TodayWorkConatiner;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TodayWorkConatiner.tsx"],"names":["React","styled","stores","DateUtils","Format","Div","div","TodayWorkConatiner","storeModel","useStore","getTimelines","getTasks","getMyCurrentDayDur","flatMap","task","note","timeLines","map","timeline","getTitled","title","sort","a","b","timeStamp","isDivder","formatTimeInSecond2","content","join"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,MAAMC,GAAG,GAAGJ,MAAM,CAACK,GAAI;;;;;;CAAvB;;AAQA,MAAMC,kBAA4B,GAAG,MAAM;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,MAAM,CAACO,QAAP,CAAgB,WAAhB,CAAvB;;AAEA,WAASC,YAAT,GAAgC;AAC9B,WAAOF,UAAU,CAACG,QAAX,CAAoBR,SAAS,CAACS,kBAAV,CAA6B,CAA7B,CAApB,EACJC,OADI,CACKC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBC,GAApB,CAAyBC,QAAD,IAAc;AACvD,aAAOA,QAAQ,CAACC,SAAT,CAAmBL,IAAI,CAACM,KAAxB,CAAP;AACD,KAFkB,CADd,EAGDC,IAHC,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjB,UAAID,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AAC7B,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AACpC,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KAXI,EAaJP,GAbI,CAaCC,QAAD,IAAc;AACjB,UAAIA,QAAQ,CAACO,QAAb,EAAuB;AACrB,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAQ,GAAErB,MAAM,CAACsB,mBAAP,CAA2BR,QAAQ,CAACM,SAApC,CAA+C,IAAGN,QAAQ,CAACS,OAAQ,KAA7E;AACD;AACF,KAnBI,EAmBFC,IAnBE,CAmBG,EAnBH,CAAP;AAoBD;;AAED,sBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,YAAY,EADf,CADF;AAKD,CA/BD;;AAiCA,eAAeH,kBAAf","sourcesContent":["import 'reflect-metadata'\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport { StoreModel, Duration, TimeLine } from '../model/model'\nimport DateUtils from '../utils/DateUtils'\nimport Format from '../utils/Format'\n\n\nconst Div = styled.div`\nheight: 50vh;\noverflow: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:rgb(227, 233, 231);\n`\n\nconst TodayWorkConatiner: React.FC = () => {\n  const { storeModel } = stores.useStore('mainmodel') as { storeModel: StoreModel };\n\n  function getTimelines(): string {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0))\n      .flatMap((task) => task.note.timeLines.map((timeline) => {\n        return timeline.getTitled(task.title)\n      })).sort((a, b) => {\n        if (a.timeStamp > b.timeStamp) {\n          return -1\n        } else if (a.timeStamp < b.timeStamp) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n      )\n      .map((timeline) => {\n        if (timeline.isDivder) {\n          return \"\"\n        } else {\n          return `${Format.formatTimeInSecond2(timeline.timeStamp)} ${timeline.content} \\n`\n        }\n      }).join(\"\")\n  }\n\n  return (\n    <Div>\n      {getTimelines()}\n    </Div>\n  );\n}\n\nexport default TodayWorkConatiner;\n"]},"metadata":{},"sourceType":"module"}
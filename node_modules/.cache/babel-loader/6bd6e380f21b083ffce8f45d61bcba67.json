{"ast":null,"code":"\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ClassTransformer_1 = require(\"./ClassTransformer\");\n\nvar ClassTransformer_2 = require(\"./ClassTransformer\");\n\nexports.ClassTransformer = ClassTransformer_2.ClassTransformer;\n\n__export(require(\"./decorators\"));\n\nvar classTransformer = new ClassTransformer_1.ClassTransformer();\n\nfunction classToPlain(object, options) {\n  return classTransformer.classToPlain(object, options);\n}\n\nexports.classToPlain = classToPlain;\n\nfunction classToPlainFromExist(object, plainObject, options) {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\nexports.classToPlainFromExist = classToPlainFromExist;\n\nfunction plainToClass(cls, plain, options) {\n  return classTransformer.plainToClass(cls, plain, options);\n}\n\nexports.plainToClass = plainToClass;\n\nfunction plainToClassFromExist(clsObject, plain, options) {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\nexports.plainToClassFromExist = plainToClassFromExist;\n\nfunction classToClass(object, options) {\n  return classTransformer.classToClass(object, options);\n}\n\nexports.classToClass = classToClass;\n\nfunction classToClassFromExist(object, fromObject, options) {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\nexports.classToClassFromExist = classToClassFromExist;\n\nfunction serialize(object, options) {\n  return classTransformer.serialize(object, options);\n}\n\nexports.serialize = serialize;\n/**\n * Deserializes given JSON string to a object of the given class.\n */\n\nfunction deserialize(cls, json, options) {\n  return classTransformer.deserialize(cls, json, options);\n}\n\nexports.deserialize = deserialize;\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\n\nfunction deserializeArray(cls, json, options) {\n  return classTransformer.deserializeArray(cls, json, options);\n}\n\nexports.deserializeArray = deserializeArray;\n/**\n * Enum representing the different transformation types.\n */\n\nvar TransformationType;\n\n(function (TransformationType) {\n  TransformationType[TransformationType[\"PLAIN_TO_CLASS\"] = 0] = \"PLAIN_TO_CLASS\";\n  TransformationType[TransformationType[\"CLASS_TO_PLAIN\"] = 1] = \"CLASS_TO_PLAIN\";\n  TransformationType[TransformationType[\"CLASS_TO_CLASS\"] = 2] = \"CLASS_TO_CLASS\";\n})(TransformationType = exports.TransformationType || (exports.TransformationType = {}));","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {ClassTransformer, ClassType} from \"./ClassTransformer\";\nimport {ClassTransformOptions} from \"./ClassTransformOptions\";\n\nexport {ClassTransformer} from \"./ClassTransformer\";\nexport {ClassTransformOptions} from \"./ClassTransformOptions\";\nexport * from \"./metadata/ExposeExcludeOptions\";\nexport * from \"./decorators\";\n\nconst classTransformer = new ClassTransformer();\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n */\nexport function classToPlain<T>(object: T, options?: ClassTransformOptions): Object;\nexport function classToPlain<T>(object: T[], options?: ClassTransformOptions): Object[];\nexport function classToPlain<T>(object: T|T[], options?: ClassTransformOptions): Object|Object[] {\n    return classTransformer.classToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToPlainFromExist<T>(object: T, plainObject: Object, options?: ClassTransformOptions): Object;\nexport function classToPlainFromExist<T>(object: T, plainObjects: Object[], options?: ClassTransformOptions): Object[];\nexport function classToPlainFromExist<T>(object: T, plainObject: Object|Object[], options?: ClassTransformOptions): Object|Object[] {\n    return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n */\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClass<T, V>(cls: ClassType<T>, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.plainToClass(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object.\n * Uses given object as source object (it means fills given object with data from plain object).\n *  Also works with arrays.\n */\nexport function plainToClassFromExist<T, V>(clsObject: T[], plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\n/**\n * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n */\nexport function classToClass<T>(object: T, options?: ClassTransformOptions): T;\nexport function classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\nexport function classToClass<T>(object: T|T[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.classToClass(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\nexport function classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\nexport function classToClassFromExist<T>(object: T, fromObject: T|T[], options?: ClassTransformOptions): T|T[] {\n    return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\n/**\n * Serializes given object to a JSON string.\n */\nexport function serialize<T>(object: T, options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T[], options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T|T[], options?: ClassTransformOptions): string {\n    return classTransformer.serialize(object, options);\n}\n\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nexport function deserialize<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T {\n    return classTransformer.deserialize(cls, json, options);\n}\n\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nexport function deserializeArray<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T[] {\n    return classTransformer.deserializeArray(cls, json, options);\n}\n\n/**\n * Enum representing the different transformation types.\n */\n\nexport enum TransformationType {\n    PLAIN_TO_CLASS,\n    CLASS_TO_PLAIN,\n    CLASS_TO_CLASS\n}\n"],"sourceRoot":"."},"metadata":{},"sourceType":"script"}
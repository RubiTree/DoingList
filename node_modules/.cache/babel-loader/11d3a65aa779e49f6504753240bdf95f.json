{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar store_1 = require(\"./store\");\n\nvar Icestore =\n/** @class */\nfunction () {\n  function Icestore() {\n    /** Stores registered */\n    this.stores = {};\n    /** Global middlewares applied to all stores */\n\n    this.globalMiddlewares = [];\n    /** middleware applied to single store */\n\n    this.middlewareMap = {};\n  }\n  /**\n   * Register and init store\n   * @param {string} namespace - unique name of store\n   * @param {object} bindings - object of state and actions used to init store\n   * @return {object} store instance\n   */\n\n\n  Icestore.prototype.registerStore = function (namespace, bindings) {\n    if (this.stores[namespace]) {\n      throw new Error(\"Namespace have been used: \" + namespace + \".\");\n    }\n\n    var storeMiddlewares = this.middlewareMap[namespace] || [];\n    var middlewares = this.globalMiddlewares.concat(storeMiddlewares);\n    this.stores[namespace] = new store_1.default(namespace, bindings, middlewares);\n    return this.stores[namespace];\n  };\n  /**\n   * Apply middleware to stores\n   * @param {array} middlewares - middlewares queue of store\n   * @param {string} namespace - unique name of store\n   */\n\n\n  Icestore.prototype.applyMiddleware = function (middlewares, namespace) {\n    if (namespace !== undefined) {\n      this.middlewareMap[namespace] = middlewares;\n    } else {\n      this.globalMiddlewares = middlewares;\n    }\n  };\n  /**\n   * Find store by namespace\n   * @param {string} namespace - unique name of store\n   * @return {object} store instance\n   */\n\n\n  Icestore.prototype.getModel = function (namespace) {\n    var store = this.stores[namespace];\n\n    if (!store) {\n      throw new Error(\"Not found namespace: \" + namespace + \".\");\n    }\n\n    return store;\n  };\n  /**\n   * Get state of store by namespace\n   * @param {string} namespace - unique name of store\n   * @return {object} store's state\n   */\n\n\n  Icestore.prototype.getState = function (namespace) {\n    return this.getModel(namespace).getState();\n  };\n  /**\n   * Hook of using store\n   * @param {string} namespace - unique name of store\n   * @return {object} store's bindings\n   */\n\n\n  Icestore.prototype.useStore = function (namespace) {\n    return this.getModel(namespace).useStore();\n  };\n  /**\n   * Hook of using multiple stores\n   * @param {string} namespace - unique name of store\n   * @return {array} array of store's bindings\n   */\n\n\n  Icestore.prototype.useStores = function (namespaces) {\n    var _this = this;\n\n    return namespaces.map(function (namespace) {\n      return _this.useStore(namespace);\n    });\n  };\n\n  return Icestore;\n}();\n\nexports.default = Icestore;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,IAAA,QAAA;AAAA;AAAA,YAAA;AAAA,WAAA,QAAA,GAAA;AACE;AACQ,SAAA,MAAA,GAAuC,EAAvC;AAER;;AACQ,SAAA,iBAAA,GAAkC,EAAlC;AAER;;AACQ,SAAA,aAAA,GAAqD,EAArD;AAuET;AArEC;;;;;;;;AAMO,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,SAArB,EAAwC,QAAxC,EAAwD;AACtD,QAAI,KAAK,MAAL,CAAY,SAAZ,CAAJ,EAA4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,+BAA6B,SAA7B,GAAsC,GAAhD,CAAN;AACD;;AAED,QAAM,gBAAgB,GAAG,KAAK,aAAL,CAAmB,SAAnB,KAAiC,EAA1D;AACA,QAAM,WAAW,GAAG,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,gBAA9B,CAApB;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,IAAI,OAAA,CAAA,OAAJ,CAAU,SAAV,EAAqB,QAArB,EAA+B,WAA/B,CAAzB;AACA,WAAO,KAAK,MAAL,CAAY,SAAZ,CAAP;AACD,GATM;AAWP;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,WAAvB,EAAkD,SAAlD,EAAmE;AACjE,QAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,WAAK,aAAL,CAAmB,SAAnB,IAAgC,WAAhC;AACD,KAFD,MAEO;AACL,WAAK,iBAAL,GAAyB,WAAzB;AACD;AACF,GANM;AAQP;;;;;;;AAKQ,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,SAAjB,EAAkC;AAChC,QAAM,KAAK,GAAU,KAAK,MAAL,CAAY,SAAZ,CAArB;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,IAAI,KAAJ,CAAU,0BAAwB,SAAxB,GAAiC,GAA3C,CAAN;AACD;;AACD,WAAO,KAAP;AACD,GANO;AAQR;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,SAAhB,EAAiC;AAC/B,WAAO,KAAK,QAAL,CAAc,SAAd,EAAyB,QAAzB,EAAP;AACD,GAFM;AAIP;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,SAAhB,EAAiC;AAC/B,WAAO,KAAK,QAAL,CAAc,SAAd,EAAyB,QAAzB,EAAP;AACD,GAFM;AAIP;;;;;;;AAKO,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,UAAjB,EAAqC;AAArC,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,UAAU,CAAC,GAAX,CAAe,UAAA,SAAA,EAAS;AAAI,aAAA,KAAI,CAAC,QAAL,CAAA,SAAA,CAAA;AAAwB,KAApD,CAAP;AACD,GAFM;;AAGT,SAAA,QAAA;AAAC,CA/ED,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar store_1 = require(\"./store\");\nvar Icestore = /** @class */ (function () {\n    function Icestore() {\n        /** Stores registered */\n        this.stores = {};\n        /** Global middlewares applied to all stores */\n        this.globalMiddlewares = [];\n        /** middleware applied to single store */\n        this.middlewareMap = {};\n    }\n    /**\n     * Register and init store\n     * @param {string} namespace - unique name of store\n     * @param {object} bindings - object of state and actions used to init store\n     * @return {object} store instance\n     */\n    Icestore.prototype.registerStore = function (namespace, bindings) {\n        if (this.stores[namespace]) {\n            throw new Error(\"Namespace have been used: \" + namespace + \".\");\n        }\n        var storeMiddlewares = this.middlewareMap[namespace] || [];\n        var middlewares = this.globalMiddlewares.concat(storeMiddlewares);\n        this.stores[namespace] = new store_1.default(namespace, bindings, middlewares);\n        return this.stores[namespace];\n    };\n    /**\n     * Apply middleware to stores\n     * @param {array} middlewares - middlewares queue of store\n     * @param {string} namespace - unique name of store\n     */\n    Icestore.prototype.applyMiddleware = function (middlewares, namespace) {\n        if (namespace !== undefined) {\n            this.middlewareMap[namespace] = middlewares;\n        }\n        else {\n            this.globalMiddlewares = middlewares;\n        }\n    };\n    /**\n     * Find store by namespace\n     * @param {string} namespace - unique name of store\n     * @return {object} store instance\n     */\n    Icestore.prototype.getModel = function (namespace) {\n        var store = this.stores[namespace];\n        if (!store) {\n            throw new Error(\"Not found namespace: \" + namespace + \".\");\n        }\n        return store;\n    };\n    /**\n     * Get state of store by namespace\n     * @param {string} namespace - unique name of store\n     * @return {object} store's state\n     */\n    Icestore.prototype.getState = function (namespace) {\n        return this.getModel(namespace).getState();\n    };\n    /**\n     * Hook of using store\n     * @param {string} namespace - unique name of store\n     * @return {object} store's bindings\n     */\n    Icestore.prototype.useStore = function (namespace) {\n        return this.getModel(namespace).useStore();\n    };\n    /**\n     * Hook of using multiple stores\n     * @param {string} namespace - unique name of store\n     * @return {array} array of store's bindings\n     */\n    Icestore.prototype.useStores = function (namespaces) {\n        var _this = this;\n        return namespaces.map(function (namespace) { return _this.useStore(namespace); });\n    };\n    return Icestore;\n}());\nexports.default = Icestore;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}
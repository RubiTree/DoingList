{"ast":null,"code":"var _jsxFileName = \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TodayWorkConatiner.tsx\";\nimport 'reflect-metadata';\nimport React from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport { List } from '../model/model';\nimport DateUtils from '../utils/DateUtils';\nconst Div = styled.div`\nheight: 45vh;\noverflow: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:rgba(194, 226, 255, 0.795);\n\n::-webkit-scrollbar {\n            -webkit-appearance: none;\n            width: 7px;\n        }\n        ::-webkit-scrollbar-thumb {\n            border-radius: 4px;\n            background-color: rgba(0, 0, 0, .5);\n            box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n        }\n`;\n\nconst TodayWorkConatiner = () => {\n  const {\n    storeModel\n  } = stores.useStore('mainmodel');\n\n  function getTimelines() {\n    return storeModel.getCurrentDayDoingTasks(DateUtils.getMyCurrentDayDur(0)).sort((a, b) => {\n      if (a.lastStartTime() > b.lastStartTime()) {\n        return -1;\n      } else if (a.lastStartTime() < b.lastStartTime()) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).map(task => {\n      return `${task.title} `;\n    }).join(\"\\n\");\n  } //     {getTimelines()}\n\n\n  return /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    size: \"small\",\n    style: {\n      backgroundColor: 'white',\n      margin: \"1%\"\n    },\n    bordered: true,\n    dataSource: storeModel.getTasks(DateUtils.getMyCurrentDayDur(currentDayOffset)),\n    renderItem: task => /*#__PURE__*/React.createElement(\"div\", {\n      key: task.id,\n      onClick: e => onChooseNote(e, task),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      flex: \"1 1 auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NoteItemInput, {\n      key: task.id,\n      task: task,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      flex: \"0 1 auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, getShowTips(task), /*#__PURE__*/React.createElement(Dropdown, {\n      overlay: getMenu(task),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      style: {\n        paddingLeft: 5\n      },\n      className: \"ant-dropdown-link\",\n      onClick: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, formartLevel(task.level), \" \", /*#__PURE__*/React.createElement(DownOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 48\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      onClick: e => startTask(e, task),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"Start\")))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TodayWorkConatiner;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TodayWorkConatiner.tsx"],"names":["React","styled","stores","List","DateUtils","Div","div","TodayWorkConatiner","storeModel","useStore","getTimelines","getCurrentDayDoingTasks","getMyCurrentDayDur","sort","a","b","lastStartTime","map","task","title","join","backgroundColor","margin","getTasks","currentDayOffset","id","e","onChooseNote","getShowTips","getMenu","paddingLeft","preventDefault","formartLevel","level","startTask"],"mappings":"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","sourcesContent":["import 'reflect-metadata'\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport { StoreModel, List, TimeLine } from '../model/model'\nimport DateUtils from '../utils/DateUtils'\nimport Format from '../utils/Format'\n\n\nconst Div = styled.div`\nheight: 45vh;\noverflow: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:rgba(194, 226, 255, 0.795);\n\n::-webkit-scrollbar {\n            -webkit-appearance: none;\n            width: 7px;\n        }\n        ::-webkit-scrollbar-thumb {\n            border-radius: 4px;\n            background-color: rgba(0, 0, 0, .5);\n            box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n        }\n`\n\nconst TodayWorkConatiner: React.FC = () => {\n  const { storeModel } = stores.useStore('mainmodel') as { storeModel: StoreModel };\n\n  function getTimelines(): string {\n    return storeModel.getCurrentDayDoingTasks(DateUtils.getMyCurrentDayDur(0))\n      .sort((a, b) => {\n        if (a.lastStartTime() > b.lastStartTime()) {\n          return -1\n        } else if (a.lastStartTime() < b.lastStartTime()) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n      )\n      .map((task) => {\n        return `${task.title} `\n      }).join(\"\\n\")\n  }\n\n  //     {getTimelines()}\n  return (\n    <Div>\n      {/* <div style={{ fontWeight: \"bold\" }}>【最近任务】</div> */}\n  \n      <List\n        size=\"small\"\n        style={{ backgroundColor: 'white', margin: \"1%\" }}\n        bordered\n        dataSource={storeModel.getTasks(DateUtils.getMyCurrentDayDur(currentDayOffset))}\n        renderItem={task => (\n          <div key={task.id} onClick={(e) => onChooseNote(e, task)} >\n\n            <Row>\n              <Col flex=\"1 1 auto\">\n                <NoteItemInput key={task.id} task={task} />\n              </Col>\n              <Col flex=\"0 1 auto\">\n\n                {getShowTips(task)}\n                <Dropdown overlay={getMenu(task)}>\n                  <a style={{ paddingLeft: 5 }} className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                    {formartLevel(task.level)} <DownOutlined />\n                  </a>\n                </Dropdown>\n\n                <Button onClick={(e) => startTask(e, task)}>Start</Button>\n\n              </Col>\n            </Row>\n\n          </div>\n        )}\n      />\n    </Div>\n  );\n}\n\nexport default TodayWorkConatiner;\n"]},"metadata":{},"sourceType":"module"}
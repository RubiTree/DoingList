{"ast":null,"code":"import _initializerDefineProperty from \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor, _class2, _temp, _dec2, _class3, _descriptor2, _temp2;\n\nimport Utils from '../utils/Utils';\nimport { Type } from \"class-transformer\";\nlet Task = (_dec = Type(() => Duration), (_class = (_temp = _class2 = class Task {\n  constructor() {\n    this.id = -1;\n    this.title = \"undefine\";\n    this.note = new Note();\n    this.level = 3;\n    this.createTime = -1;\n    this.doneTime = -1;\n    this.pendingDeadline = -1;\n    this.pendingReason = \"\";\n    this.deadlines = [];\n    this.expectConsumes = [];\n    this.expectStartTime = -1;\n\n    _initializerDefineProperty(this, \"doingDurs\", _descriptor, this);\n  }\n\n  // 反序列化不能有带参数的构造器\n  // public constructor(title: string) {\n  //     this.title = title\n  //     this.createTime = Utils.getTimestamp()\n  //     this.id = Utils.generateId() + Task.idCounter\n  //     Task.idCounter = Task.idCounter + 1000\n  // }\n  init(title) {\n    this.title = title;\n    this.createTime = Utils.getTimestamp();\n    this.expectStartTime = this.createTime;\n    this.id = Utils.generateId() + Task.idCounter;\n    Task.idCounter = Task.idCounter + 1000;\n  }\n\n  isSameTask(task) {\n    if (task === undefined) {\n      return false;\n    } else {\n      return this.id === task.id;\n    }\n  }\n\n  isDoing() {\n    if (this.doingDurs.length === 0) {\n      return false;\n    } else {\n      let lastTask = this.doingDurs[this.doingDurs.length - 1];\n      return lastTask.end === -1;\n    }\n  }\n\n  lastStartTime() {\n    if (this.doingDurs.length === 0) {\n      return -1;\n    } else {\n      let lastTask = this.doingDurs[this.doingDurs.length - 1];\n      return lastTask.start;\n    }\n  }\n\n  start() {\n    let duration = new Duration();\n    const currentTime = Utils.getTimestamp();\n    duration.init(currentTime);\n    this.doingDurs.push(duration);\n\n    if (currentTime < this.expectStartTime) {\n      this.expectStartTime = currentTime;\n    }\n  }\n\n  stop() {\n    this.doingDurs[this.doingDurs.length - 1].end = Utils.getTimestamp();\n  }\n\n  stopDelay(delay) {\n    this.doingDurs[this.doingDurs.length - 1].end = Utils.getTimestamp() + delay;\n  }\n\n  isDone() {\n    return this.doneTime !== -1;\n  }\n\n  isPending() {\n    return this.pendingDeadline !== -1;\n  }\n\n  isDangerousPending() {\n    return this.isTimeDangers(this.pendingDeadline);\n  }\n\n  isDangerousDeadline() {\n    return this.isTimeDangers(this.getActualDeadline());\n  }\n\n  isDangerous() {\n    return this.isDangerousPending() || this.isDangerousDeadline();\n  }\n  /**\n   * dealine 距离还有2个小时，或者已经过了\n   */\n\n\n  isTimeDangers(deadline) {\n    if (deadline <= 0) {\n      return false;\n    }\n\n    if (deadline - Utils.getTimestamp() <= 2 * 60 * 60 * 1000) {\n      return true;\n    }\n\n    return false;\n  }\n\n  done() {\n    this.doneTime = Utils.getTimestamp();\n  } // 返回毫秒数\n  // todo rename getAllDoingDuration\n\n\n  getAllDuration() {\n    if (this.doingDurs.length === 0) {\n      return 0;\n    }\n\n    return this.doingDurs.map((value, index) => value.getDur(index === this.doingDurs.length - 1)).reduce((a, b) => a + b);\n  }\n\n  getActualDeadline() {\n    if (this.deadlines.length === 0) {\n      return -1;\n    }\n\n    return this.deadlines[this.deadlines.length - 1];\n  }\n\n  getActualExpectConsume() {\n    if (this.expectConsumes.length === 0) {\n      return -1;\n    }\n\n    return this.expectConsumes[this.expectConsumes.length - 1];\n  } // 超出预期时间返回多花的时间，负值\n  // 用的时候有提前判断 getActualExpectConsume 是不是返回负值\n\n\n  getLeftExpectConsumeTime() {\n    let left = this.getActualExpectConsume() - this.getAllDuration();\n\n    if (left < 0) {\n      console.error(\"超出预期时间\");\n    }\n\n    return left;\n  }\n\n}, _class2.idCounter = 0, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"doingDurs\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n})), _class));\n\nclass Duration {\n  constructor() {\n    this.start = -1;\n    this.end = -1;\n    this.name = \"\";\n  }\n\n  // todo 没法重载\n  init(start) {\n    this.start = start;\n  }\n\n  init2(start, end) {\n    this.start = start;\n\n    if (end != undefined) {\n      this.end = end;\n    }\n  }\n\n  isIn(timeStamp) {\n    return timeStamp >= this.start && timeStamp <= this.end;\n  }\n\n  getDur(isDoing) {\n    let end = this.end;\n\n    if (end == -1 && isDoing) {\n      end = Utils.getTimestamp();\n    }\n\n    if (end == -1) {\n      console.error(\"这段时间未结束\");\n      return 0;\n    }\n\n    return end - this.start;\n  }\n\n  isValid(isDoing) {\n    if (!isDoing && this.end == -1) return false;\n    return true;\n  }\n\n  static create(start, end, name) {\n    let dur = new Duration();\n\n    if (start != undefined) {\n      dur.start = start;\n    }\n\n    if (end != undefined) {\n      dur.end = end;\n    }\n\n    if (end != undefined) {\n      dur.end = end;\n    }\n  }\n\n}\n\nclass Note {\n  constructor() {\n    this.content = \"\";\n  }\n\n}\n\nlet StoreModel = (_dec2 = Type(() => Task), (_class3 = (_temp2 = class StoreModel {\n  constructor() {\n    _initializerDefineProperty(this, \"tasks\", _descriptor2, this);\n  }\n\n  /**\n   * 筛选规则：\n   * 1. 所有 未完成 且 预期开始时间在今天endtime之前 的任务\n   * 2. 今天完成的任务\n   */\n  getTasks(dur) {\n    return this.tasks.filter(value => {\n      return !value.isDone() && value.expectStartTime <= dur.end || dur.isIn(value.doneTime);\n    });\n  }\n\n  addTask(task) {\n    if (this.containsProject(task.id)) return;\n    this.tasks.push(task);\n  }\n\n  removeTask(task) {\n    if (!this.containsProject(task.id)) return false;\n    let length = this.tasks.length;\n\n    for (let i = 0; i < length; i++) {\n      if (this.tasks[i].id === task.id) {\n        if (i === 0) {\n          this.tasks.shift(); //删除并返回数组的第一个元素\n        } else if (i === length - 1) {\n          this.tasks.pop(); //删除并返回数组的最后一个元素\n        } else {\n          this.tasks.splice(i, 1); //删除下标为i的元素\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  containsProject(id) {\n    return this.tasks.find(item => item.id === id) !== undefined;\n  }\n\n  orderTasks() {\n    this.tasks.sort((a, b) => {\n      // 完成的放最后\n      if (a.isDone() && !b.isDone()) {\n        return 1;\n      } else if (!a.isDone() && b.isDone()) {\n        return -1;\n      } else {\n        // 正在做的放最前\n        if (a.isDoing()) {\n          return -1;\n        } else if (b.isDoing()) {\n          return 1;\n        } else {\n          // 到时间的放前面\n          if (a.isDangerous() && !b.isDangerous()) {\n            return -1;\n          } else if (!a.isDangerous() && b.isDangerous()) {\n            return 1;\n          } else {\n            // 然后比较level\n            if (a.level > b.level) {\n              return 1;\n            } else if (a.level < b.level) {\n              return -1;\n            } else {\n              // 同样 level 比较创建时间\n              if (a.createTime > b.createTime) {\n                return -1;\n              } else if (a.createTime < b.createTime) {\n                return 1;\n              } else {\n                return 0;\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n}, _temp2), (_descriptor2 = _applyDecoratedDescriptor(_class3.prototype, \"tasks\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n})), _class3));\nexport { Task, Duration, StoreModel, Note };","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/model/model.ts"],"names":["Utils","Type","Task","Duration","id","title","note","Note","level","createTime","doneTime","pendingDeadline","pendingReason","deadlines","expectConsumes","expectStartTime","init","getTimestamp","generateId","idCounter","isSameTask","task","undefined","isDoing","doingDurs","length","lastTask","end","lastStartTime","start","duration","currentTime","push","stop","stopDelay","delay","isDone","isPending","isDangerousPending","isTimeDangers","isDangerousDeadline","getActualDeadline","isDangerous","deadline","done","getAllDuration","map","value","index","getDur","reduce","a","b","getActualExpectConsume","getLeftExpectConsumeTime","left","console","error","name","init2","isIn","timeStamp","isValid","create","dur","content","StoreModel","getTasks","tasks","filter","addTask","containsProject","removeTask","i","shift","pop","splice","find","item","orderTasks","sort"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;IAEMC,I,WAwBDD,IAAI,CAAC,MAAME,QAAP,C,+BAxBT,MAAMD,IAAN,CAAW;AAAA;AAAA,SAIAE,EAJA,GAIa,CAAC,CAJd;AAAA,SAMAC,KANA,GAMgB,UANhB;AAAA,SAOAC,IAPA,GAOa,IAAIC,IAAJ,EAPb;AAAA,SASAC,KATA,GASgB,CAThB;AAAA,SAWAC,UAXA,GAWqB,CAAC,CAXtB;AAAA,SAYAC,QAZA,GAYmB,CAAC,CAZpB;AAAA,SAcAC,eAdA,GAc0B,CAAC,CAd3B;AAAA,SAeAC,aAfA,GAewB,EAfxB;AAAA,SAkBAC,SAlBA,GAkBsB,EAlBtB;AAAA,SAoBAC,cApBA,GAoB2B,EApB3B;AAAA,SAsBAC,eAtBA,GAsB0B,CAAC,CAtB3B;;AAAA;AAAA;;AA4BP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEOC,EAAAA,IAAP,CAAYX,KAAZ,EAA2B;AACvB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKI,UAAL,GAAkBT,KAAK,CAACiB,YAAN,EAAlB;AACA,SAAKF,eAAL,GAAuB,KAAKN,UAA5B;AAEA,SAAKL,EAAL,GAAUJ,KAAK,CAACkB,UAAN,KAAqBhB,IAAI,CAACiB,SAApC;AACAjB,IAAAA,IAAI,CAACiB,SAAL,GAAiBjB,IAAI,CAACiB,SAAL,GAAiB,IAAlC;AACH;;AAEMC,EAAAA,UAAP,CAAkBC,IAAlB,EAAmD;AAC/C,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAO,KAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAKlB,EAAL,KAAYiB,IAAI,CAACjB,EAAxB;AACH;AACJ;;AAEMmB,EAAAA,OAAP,GAA0B;AACtB,QAAI,KAAKC,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAO,KAAP;AACH,KAFD,MAEO;AACH,UAAIC,QAAQ,GAAG,KAAKF,SAAL,CAAe,KAAKA,SAAL,CAAeC,MAAf,GAAwB,CAAvC,CAAf;AACA,aAAOC,QAAQ,CAACC,GAAT,KAAiB,CAAC,CAAzB;AACH;AACJ;;AAEMC,EAAAA,aAAP,GAA+B;AAC3B,QAAI,KAAKJ,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAO,CAAC,CAAR;AACH,KAFD,MAEO;AACH,UAAIC,QAAQ,GAAG,KAAKF,SAAL,CAAe,KAAKA,SAAL,CAAeC,MAAf,GAAwB,CAAvC,CAAf;AACA,aAAOC,QAAQ,CAACG,KAAhB;AACH;AACJ;;AAEMA,EAAAA,KAAP,GAAe;AACX,QAAIC,QAAQ,GAAG,IAAI3B,QAAJ,EAAf;AACA,UAAM4B,WAAW,GAAG/B,KAAK,CAACiB,YAAN,EAApB;AACAa,IAAAA,QAAQ,CAACd,IAAT,CAAce,WAAd;AACA,SAAKP,SAAL,CAAeQ,IAAf,CAAoBF,QAApB;;AAEA,QAAIC,WAAW,GAAI,KAAKhB,eAAxB,EAAwC;AACpC,WAAKA,eAAL,GAAuBgB,WAAvB;AACH;AACJ;;AAEME,EAAAA,IAAP,GAAc;AACV,SAAKT,SAAL,CAAe,KAAKA,SAAL,CAAeC,MAAf,GAAwB,CAAvC,EAA0CE,GAA1C,GAAgD3B,KAAK,CAACiB,YAAN,EAAhD;AACH;;AAEMiB,EAAAA,SAAP,CAAiBC,KAAjB,EAAgC;AAC5B,SAAKX,SAAL,CAAe,KAAKA,SAAL,CAAeC,MAAf,GAAwB,CAAvC,EAA0CE,GAA1C,GAAgD3B,KAAK,CAACiB,YAAN,KAAuBkB,KAAvE;AACH;;AAEMC,EAAAA,MAAP,GAAyB;AACrB,WAAO,KAAK1B,QAAL,KAAkB,CAAC,CAA1B;AACH;;AAEM2B,EAAAA,SAAP,GAA4B;AACxB,WAAO,KAAK1B,eAAL,KAAyB,CAAC,CAAjC;AACH;;AAEM2B,EAAAA,kBAAP,GAAqC;AACjC,WAAO,KAAKC,aAAL,CAAmB,KAAK5B,eAAxB,CAAP;AACH;;AAEM6B,EAAAA,mBAAP,GAAsC;AAClC,WAAO,KAAKD,aAAL,CAAmB,KAAKE,iBAAL,EAAnB,CAAP;AACH;;AAEMC,EAAAA,WAAP,GAA8B;AAC1B,WAAO,KAAKJ,kBAAL,MAA6B,KAAKE,mBAAL,EAApC;AACH;AAED;;;;;AAGQD,EAAAA,aAAR,CAAsBI,QAAtB,EAAiD;AAC7C,QAAIA,QAAQ,IAAI,CAAhB,EAAmB;AACf,aAAO,KAAP;AACH;;AAED,QAAIA,QAAQ,GAAG3C,KAAK,CAACiB,YAAN,EAAX,IAAmC,IAAI,EAAJ,GAAS,EAAT,GAAc,IAArD,EAA2D;AACvD,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEM2B,EAAAA,IAAP,GAAc;AACV,SAAKlC,QAAL,GAAgBV,KAAK,CAACiB,YAAN,EAAhB;AACH,GAhIM,CAkIP;AACA;;;AACO4B,EAAAA,cAAP,GAAgC;AAC5B,QAAI,KAAKrB,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAO,CAAP;AACH;;AAED,WAAO,KAAKD,SAAL,CAAesB,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,MAAN,CAAaD,KAAK,KAAK,KAAKxB,SAAL,CAAeC,MAAf,GAAwB,CAA/C,CAArC,EAAwFyB,MAAxF,CAA+F,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA7G,CAAP;AACH;;AAEMX,EAAAA,iBAAP,GAAmC;AAC/B,QAAI,KAAK5B,SAAL,CAAeY,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAO,CAAC,CAAR;AACH;;AAED,WAAO,KAAKZ,SAAL,CAAe,KAAKA,SAAL,CAAeY,MAAf,GAAwB,CAAvC,CAAP;AACH;;AAEM4B,EAAAA,sBAAP,GAAwC;AACpC,QAAI,KAAKvC,cAAL,CAAoBW,MAApB,KAA+B,CAAnC,EAAsC;AAClC,aAAO,CAAC,CAAR;AACH;;AAED,WAAO,KAAKX,cAAL,CAAoB,KAAKA,cAAL,CAAoBW,MAApB,GAA6B,CAAjD,CAAP;AACH,GA1JM,CA4JP;AACA;;;AACO6B,EAAAA,wBAAP,GAA0C;AACtC,QAAIC,IAAI,GAAG,KAAKF,sBAAL,KAAgC,KAAKR,cAAL,EAA3C;;AACA,QAAIU,IAAI,GAAG,CAAX,EAAc;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,QAAd;AACH;;AACD,WAAOF,IAAP;AACH;;AApKM,C,UAEQpC,S,GAAY,C;;;;;WAuBI,E;;;;AA8InC,MAAMhB,QAAN,CAAe;AAAA;AAAA,SACJ0B,KADI,GACY,CAAC,CADb;AAAA,SAEJF,GAFI,GAEU,CAAC,CAFX;AAAA,SAGJ+B,IAHI,GAGU,EAHV;AAAA;;AAKX;AACO1C,EAAAA,IAAP,CAAYa,KAAZ,EAA2B;AACvB,SAAKA,KAAL,GAAaA,KAAb;AACH;;AACM8B,EAAAA,KAAP,CAAa9B,KAAb,EAA4BF,GAA5B,EAA0C;AACtC,SAAKE,KAAL,GAAaA,KAAb;;AACA,QAAIF,GAAG,IAAIL,SAAX,EAAsB;AAClB,WAAKK,GAAL,GAAWA,GAAX;AACH;AACJ;;AAEMiC,EAAAA,IAAP,CAAYC,SAAZ,EAA+B;AAC3B,WAAOA,SAAS,IAAI,KAAKhC,KAAlB,IAA2BgC,SAAS,IAAI,KAAKlC,GAApD;AACH;;AAEMsB,EAAAA,MAAP,CAAc1B,OAAd,EAAwC;AACpC,QAAII,GAAG,GAAG,KAAKA,GAAf;;AACA,QAAIA,GAAG,IAAI,CAAC,CAAR,IAAaJ,OAAjB,EAA0B;AACtBI,MAAAA,GAAG,GAAG3B,KAAK,CAACiB,YAAN,EAAN;AACH;;AACD,QAAIU,GAAG,IAAI,CAAC,CAAZ,EAAe;AACX6B,MAAAA,OAAO,CAACC,KAAR,CAAc,SAAd;AACA,aAAO,CAAP;AACH;;AACD,WAAO9B,GAAG,GAAG,KAAKE,KAAlB;AACH;;AAEMiC,EAAAA,OAAP,CAAevC,OAAf,EAAiC;AAC7B,QAAI,CAACA,OAAD,IAAY,KAAKI,GAAL,IAAY,CAAC,CAA7B,EAAgC,OAAO,KAAP;AAChC,WAAO,IAAP;AACH;;AAED,SAAcoC,MAAd,CAAqBlC,KAArB,EAAqCF,GAArC,EAAmD+B,IAAnD,EAAgE;AAC5D,QAAIM,GAAG,GAAG,IAAI7D,QAAJ,EAAV;;AACA,QAAI0B,KAAK,IAAIP,SAAb,EAAwB;AACpB0C,MAAAA,GAAG,CAACnC,KAAJ,GAAYA,KAAZ;AACH;;AACD,QAAIF,GAAG,IAAIL,SAAX,EAAsB;AAClB0C,MAAAA,GAAG,CAACrC,GAAJ,GAAUA,GAAV;AACH;;AACD,QAAIA,GAAG,IAAIL,SAAX,EAAsB;AAClB0C,MAAAA,GAAG,CAACrC,GAAJ,GAAUA,GAAV;AACH;AACJ;;AAhDU;;AAmDf,MAAMpB,IAAN,CAAW;AAAA;AAAA,SACA0D,OADA,GACkB,EADlB;AAAA;;AAAA;;IAILC,U,YACDjE,IAAI,CAAC,MAAMC,IAAP,C,uBADT,MAAMgE,UAAN,CAAiB;AAAA;AAAA;AAAA;;AAIb;;;;;AAKOC,EAAAA,QAAP,CAAgBH,GAAhB,EAAuC;AACnC,WAAO,KAAKI,KAAL,CAAWC,MAAX,CAAmBtB,KAAD,IAAW;AAChC,aAAQ,CAACA,KAAK,CAACX,MAAN,EAAD,IAAmBW,KAAK,CAAChC,eAAN,IAAyBiD,GAAG,CAACrC,GAAjD,IAAyDqC,GAAG,CAACJ,IAAJ,CAASb,KAAK,CAACrC,QAAf,CAAhE;AACH,KAFM,CAAP;AAGH;;AAEM4D,EAAAA,OAAP,CAAejD,IAAf,EAA2B;AACvB,QAAI,KAAKkD,eAAL,CAAqBlD,IAAI,CAACjB,EAA1B,CAAJ,EAAmC;AAEnC,SAAKgE,KAAL,CAAWpC,IAAX,CAAgBX,IAAhB;AACH;;AAEMmD,EAAAA,UAAP,CAAkBnD,IAAlB,EAAuC;AACnC,QAAI,CAAC,KAAKkD,eAAL,CAAqBlD,IAAI,CAACjB,EAA1B,CAAL,EAAoC,OAAO,KAAP;AAEpC,QAAIqB,MAAM,GAAG,KAAK2C,KAAL,CAAW3C,MAAxB;;AACA,SAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhD,MAApB,EAA4BgD,CAAC,EAA7B,EAAiC;AAC7B,UAAI,KAAKL,KAAL,CAAWK,CAAX,EAAcrE,EAAd,KAAqBiB,IAAI,CAACjB,EAA9B,EAAkC;AAC9B,YAAIqE,CAAC,KAAK,CAAV,EAAa;AACT,eAAKL,KAAL,CAAWM,KAAX,GADS,CACW;AACvB,SAFD,MAEO,IAAID,CAAC,KAAKhD,MAAM,GAAG,CAAnB,EAAsB;AACzB,eAAK2C,KAAL,CAAWO,GAAX,GADyB,CACN;AACtB,SAFM,MAEA;AACH,eAAKP,KAAL,CAAWQ,MAAX,CAAkBH,CAAlB,EAAqB,CAArB,EADG,CACsB;AAC5B;;AACD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;;AAEOF,EAAAA,eAAR,CAAwBnE,EAAxB,EAA6C;AACzC,WAAO,KAAKgE,KAAL,CAAWS,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAAC1E,EAAL,KAAYA,EAApC,MAA4CkB,SAAnD;AACH;;AAEMyD,EAAAA,UAAP,GAAoB;AAChB,SAAKX,KAAL,CAAWY,IAAX,CAAgB,CAAC7B,CAAD,EAAIC,CAAJ,KAAU;AACtB;AACA,UAAID,CAAC,CAACf,MAAF,MAAc,CAACgB,CAAC,CAAChB,MAAF,EAAnB,EAA+B;AAC3B,eAAO,CAAP;AACH,OAFD,MAEO,IAAI,CAACe,CAAC,CAACf,MAAF,EAAD,IAAegB,CAAC,CAAChB,MAAF,EAAnB,EAA+B;AAClC,eAAO,CAAC,CAAR;AACH,OAFM,MAEA;AACH;AACA,YAAIe,CAAC,CAAC5B,OAAF,EAAJ,EAAiB;AACb,iBAAO,CAAC,CAAR;AACH,SAFD,MAEO,IAAI6B,CAAC,CAAC7B,OAAF,EAAJ,EAAiB;AACpB,iBAAO,CAAP;AACH,SAFM,MAEA;AACH;AACA,cAAI4B,CAAC,CAACT,WAAF,MAAmB,CAACU,CAAC,CAACV,WAAF,EAAxB,EAAyC;AACrC,mBAAO,CAAC,CAAR;AACH,WAFD,MAEO,IAAI,CAACS,CAAC,CAACT,WAAF,EAAD,IAAoBU,CAAC,CAACV,WAAF,EAAxB,EAAyC;AAC5C,mBAAO,CAAP;AACH,WAFM,MAEA;AACH;AACA,gBAAIS,CAAC,CAAC3C,KAAF,GAAU4C,CAAC,CAAC5C,KAAhB,EAAuB;AACnB,qBAAO,CAAP;AACH,aAFD,MAEO,IAAI2C,CAAC,CAAC3C,KAAF,GAAU4C,CAAC,CAAC5C,KAAhB,EAAuB;AAC1B,qBAAO,CAAC,CAAR;AACH,aAFM,MAEA;AACH;AACA,kBAAI2C,CAAC,CAAC1C,UAAF,GAAe2C,CAAC,CAAC3C,UAArB,EAAiC;AAC7B,uBAAO,CAAC,CAAR;AACH,eAFD,MAEO,IAAI0C,CAAC,CAAC1C,UAAF,GAAe2C,CAAC,CAAC3C,UAArB,EAAiC;AACpC,uBAAO,CAAP;AACH,eAFM,MAEA;AACH,uBAAO,CAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,KArCD;AAsCH;;AAnFY,C;;;;;WAEU,E;;;AAqF3B,SAASP,IAAT,EAAeC,QAAf,EAAyB+D,UAAzB,EAAqC3D,IAArC","sourcesContent":["import Utils from '../utils/Utils'\nimport { Type } from \"class-transformer\";\n\nclass Task {\n    // todo delete 内存id增加器（因为mock初始化太快了，都在一个毫秒内）\n    private static idCounter = 0\n\n    public id: number = -1\n\n    public title: string = \"undefine\"\n    public note: Note = new Note()\n\n    public level: number = 3\n\n    public createTime: number = -1\n    public doneTime: number = -1\n\n    public pendingDeadline: number = -1\n    public pendingReason: string = \"\"\n\n    // 可修改，最后一个有效\n    public deadlines: number[] = []\n    // 预计花费时间，单位毫秒，可修改，最后一个有效\n    public expectConsumes: number[] = []\n    // 预期开始时间，默认是createTime，可以设置成不同时间，如果在 expectStartTime 前开始任务，此时间会自动变成这个开始任务的时间（显示逻辑一致）\n    public expectStartTime: number = -1\n\n    @Type(() => Duration)\n    public doingDurs: Duration[] = []\n\n\n    // 反序列化不能有带参数的构造器\n    // public constructor(title: string) {\n    //     this.title = title\n    //     this.createTime = Utils.getTimestamp()\n\n    //     this.id = Utils.generateId() + Task.idCounter\n    //     Task.idCounter = Task.idCounter + 1000\n    // }\n\n    public init(title: string) {\n        this.title = title\n        this.createTime = Utils.getTimestamp()\n        this.expectStartTime = this.createTime\n\n        this.id = Utils.generateId() + Task.idCounter\n        Task.idCounter = Task.idCounter + 1000\n    }\n\n    public isSameTask(task: Task | undefined): boolean {\n        if (task === undefined) {\n            return false\n        } else {\n            return this.id === task.id\n        }\n    }\n\n    public isDoing(): boolean {\n        if (this.doingDurs.length === 0) {\n            return false\n        } else {\n            let lastTask = this.doingDurs[this.doingDurs.length - 1]\n            return lastTask.end === -1\n        }\n    }\n\n    public lastStartTime(): number {\n        if (this.doingDurs.length === 0) {\n            return -1\n        } else {\n            let lastTask = this.doingDurs[this.doingDurs.length - 1]\n            return lastTask.start\n        }\n    }\n\n    public start() {\n        let duration = new Duration()\n        const currentTime = Utils.getTimestamp();\n        duration.init(currentTime)\n        this.doingDurs.push(duration)\n\n        if (currentTime <  this.expectStartTime){\n            this.expectStartTime = currentTime\n        }\n    }\n\n    public stop() {\n        this.doingDurs[this.doingDurs.length - 1].end = Utils.getTimestamp()\n    }\n\n    public stopDelay(delay: number) {\n        this.doingDurs[this.doingDurs.length - 1].end = Utils.getTimestamp() + delay\n    }\n\n    public isDone(): boolean {\n        return this.doneTime !== -1\n    }\n\n    public isPending(): boolean {\n        return this.pendingDeadline !== -1\n    }\n\n    public isDangerousPending(): boolean {\n        return this.isTimeDangers(this.pendingDeadline)\n    }\n\n    public isDangerousDeadline(): boolean {\n        return this.isTimeDangers(this.getActualDeadline())\n    }\n\n    public isDangerous(): boolean {\n        return this.isDangerousPending() || this.isDangerousDeadline()\n    }\n\n    /**\n     * dealine 距离还有2个小时，或者已经过了\n     */\n    private isTimeDangers(deadline: number): boolean {\n        if (deadline <= 0) {\n            return false\n        }\n\n        if (deadline - Utils.getTimestamp() <= 2 * 60 * 60 * 1000) {\n            return true\n        }\n\n        return false\n    }\n\n    public done() {\n        this.doneTime = Utils.getTimestamp()\n    }\n\n    // 返回毫秒数\n    // todo rename getAllDoingDuration\n    public getAllDuration(): number {\n        if (this.doingDurs.length === 0) {\n            return 0\n        }\n\n        return this.doingDurs.map((value, index) => value.getDur(index === this.doingDurs.length - 1)).reduce((a, b) => a + b)\n    }\n\n    public getActualDeadline(): number {\n        if (this.deadlines.length === 0) {\n            return -1\n        }\n\n        return this.deadlines[this.deadlines.length - 1]\n    }\n\n    public getActualExpectConsume(): number {\n        if (this.expectConsumes.length === 0) {\n            return -1\n        }\n\n        return this.expectConsumes[this.expectConsumes.length - 1]\n    }\n\n    // 超出预期时间返回多花的时间，负值\n    // 用的时候有提前判断 getActualExpectConsume 是不是返回负值\n    public getLeftExpectConsumeTime(): number {\n        let left = this.getActualExpectConsume() - this.getAllDuration()\n        if (left < 0) {\n            console.error(\"超出预期时间\")\n        }\n        return left\n    }\n}\n\nclass Duration {\n    public start: number = -1\n    public end: number = -1\n    public name:string = \"\"\n\n    // todo 没法重载\n    public init(start: number) {\n        this.start = start\n    }\n    public init2(start: number, end?: number) {\n        this.start = start\n        if (end != undefined) {\n            this.end = end\n        }\n    }\n\n    public isIn(timeStamp: number) {\n        return timeStamp >= this.start && timeStamp <= this.end\n    }\n\n    public getDur(isDoing: boolean): number {\n        let end = this.end\n        if (end == -1 && isDoing) {\n            end = Utils.getTimestamp()\n        }\n        if (end == -1) {\n            console.error(\"这段时间未结束\")\n            return 0\n        }\n        return end - this.start\n    }\n\n    public isValid(isDoing: boolean) {\n        if (!isDoing && this.end == -1) return false\n        return true\n    }\n\n    public static create(start?: number, end?: number, name?:string){\n        let dur = new Duration()\n        if (start != undefined) {\n            dur.start = start\n        }\n        if (end != undefined) {\n            dur.end = end\n        }\n        if (end != undefined) {\n            dur.end = end\n        }\n    }\n}\n\nclass Note {\n    public content: string = \"\"\n}\n\nclass StoreModel {\n    @Type(() => Task)\n    public tasks: Task[] = []\n\n    /**\n     * 筛选规则：\n     * 1. 所有 未完成 且 预期开始时间在今天endtime之前 的任务\n     * 2. 今天完成的任务\n     */\n    public getTasks(dur: Duration): Task[] {\n        return this.tasks.filter((value) => { \n            return (!value.isDone() && value.expectStartTime <= dur.end) || dur.isIn(value.doneTime) \n        })\n    }\n\n    public addTask(task: Task) {\n        if (this.containsProject(task.id)) return\n\n        this.tasks.push(task)\n    }\n\n    public removeTask(task: Task): boolean {\n        if (!this.containsProject(task.id)) return false\n\n        let length = this.tasks.length;\n        for (let i = 0; i < length; i++) {\n            if (this.tasks[i].id === task.id) {\n                if (i === 0) {\n                    this.tasks.shift(); //删除并返回数组的第一个元素\n                } else if (i === length - 1) {\n                    this.tasks.pop();  //删除并返回数组的最后一个元素\n                } else {\n                    this.tasks.splice(i, 1); //删除下标为i的元素\n                }\n                return true\n            }\n        }\n        return false\n    }\n\n    private containsProject(id: number): boolean {\n        return this.tasks.find(item => item.id === id) !== undefined\n    }\n\n    public orderTasks() {\n        this.tasks.sort((a, b) => {\n            // 完成的放最后\n            if (a.isDone() && !b.isDone()) {\n                return 1\n            } else if (!a.isDone() && b.isDone()) {\n                return -1\n            } else {\n                // 正在做的放最前\n                if (a.isDoing()) {\n                    return -1\n                } else if (b.isDoing()) {\n                    return 1\n                } else {\n                    // 到时间的放前面\n                    if (a.isDangerous() && !b.isDangerous()) {\n                        return -1\n                    } else if (!a.isDangerous() && b.isDangerous()) {\n                        return 1\n                    } else {\n                        // 然后比较level\n                        if (a.level > b.level) {\n                            return 1\n                        } else if (a.level < b.level) {\n                            return -1\n                        } else {\n                            // 同样 level 比较创建时间\n                            if (a.createTime > b.createTime) {\n                                return -1\n                            } else if (a.createTime < b.createTime) {\n                                return 1\n                            } else {\n                                return 0\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n}\n\n\nexport { Task, Duration, StoreModel, Note }"]},"metadata":{},"sourceType":"module"}
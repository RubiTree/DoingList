{"ast":null,"code":"import _classCallCheck from\"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import Format from'../utils/Format';import Utils from'../utils/Utils';var TaskInfoFormat=/*#__PURE__*/function(){function TaskInfoFormat(){_classCallCheck(this,TaskInfoFormat);}_createClass(TaskInfoFormat,null,[{key:\"getDoingStatusTips\",value:function getDoingStatusTips(task){if(task.isDoing()){return\"Doingüî¥\";// ‚õëüèÉ‚Äç‚ôÄÔ∏èüß† üèÑ‚Äç‚ôÇÔ∏è üåü üî¥\n}else{return\"\";}}},{key:\"getConsumed\",value:function getConsumed(task){var time=Format.formatDuration2(task.getAllDuration());if(Utils.isStringEmpty(time)){return\"\";}return\"\\u8FDB\\u884C\".concat(time,\"(\").concat(task.doingDurs.length,\"\\u6B21) \");}},{key:\"getDeadline\",value:function getDeadline(task){var pendingStatus=TaskInfoFormat.getPendingStatus(task);if(Utils.isStringEmpty(pendingStatus)){return TaskInfoFormat.getDeadlineStatus(task);}else{return pendingStatus;}}},{key:\"getDeadlineStatus\",value:function getDeadlineStatus(task){var deadline=task.getActualDeadline();if(deadline<=0){return\"\";}var leftTime=deadline-Utils.getTimestamp();if(leftTime<=1000){return\"Dead\\u5DF2\\u8D85\\u671F\\u2757 \";}var time=Format.formatDuration2(leftTime);return\"Dead\\u5269\\u4F59\".concat(time,\" \");}// todo ÂêàÂπ∂ÈáçÂ§çÂáΩÊï∞\n},{key:\"getPendingStatus\",value:function getPendingStatus(task){var deadline=task.pendingDeadline;if(deadline<=0){return\"\";}var leftTime=deadline-Utils.getTimestamp();if(leftTime<=1000){return\"Pend\\u5DF2\\u8D85\\u671F\\u2757 \";}var time=Format.formatDuration2(leftTime);return\"Pend\\u5269\\u4F59\".concat(time,\" \");}},{key:\"getConsumeExpected\",value:function getConsumeExpected(task){if(task.getActualExpectConsume()<=0){return\"\";}var left=task.getLeftExpectConsumeTime();if(left<=0){return\"\\u591A\\u7528\".concat(Format.formatDuration2(-left),\" \");}else{return\"\\u8FD8\\u8981\".concat(Format.formatDuration2(left),\" \");}}},{key:\"getStartExpected\",value:function getStartExpected(task){var currentTime=Utils.getTimestamp();if(currentTime>task.expectStartTime){return\"\";}return\"\\u8FD8\\u6709\".concat(Format.formatDuration2(task.expectStartTime-currentTime),\"\\u5F00\\u59CB\");}}]);return TaskInfoFormat;}();export default TaskInfoFormat;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/utils/TaskInfoFormat.ts"],"names":["Format","Utils","TaskInfoFormat","task","isDoing","time","formatDuration2","getAllDuration","isStringEmpty","doingDurs","length","pendingStatus","getPendingStatus","getDeadlineStatus","deadline","getActualDeadline","leftTime","getTimestamp","pendingDeadline","getActualExpectConsume","left","getLeftExpectConsumeTime","currentTime","expectStartTime"],"mappings":"0XACA,MAAOA,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,C,GAEMC,CAAAA,c,uLAE+BC,I,CAAoB,CACjD,GAAIA,IAAI,CAACC,OAAL,EAAJ,CAAoB,CAChB,MAAO,SAAP,CACA;AACH,CAHD,IAGO,CACH,MAAO,EAAP,CACH,CACJ,C,gDAEyBD,I,CAAoB,CAC1C,GAAIE,CAAAA,IAAI,CAAGL,MAAM,CAACM,eAAP,CAAuBH,IAAI,CAACI,cAAL,EAAvB,CAAX,CACA,GAAIN,KAAK,CAACO,aAAN,CAAoBH,IAApB,CAAJ,CAA+B,CAC3B,MAAO,EAAP,CACH,CACD,4BAAYA,IAAZ,aAAoBF,IAAI,CAACM,SAAL,CAAeC,MAAnC,aACH,C,gDAEyBP,I,CAAoB,CAC1C,GAAMQ,CAAAA,aAAa,CAAGT,cAAc,CAACU,gBAAf,CAAgCT,IAAhC,CAAtB,CACA,GAAIF,KAAK,CAACO,aAAN,CAAoBG,aAApB,CAAJ,CAAwC,CACpC,MAAOT,CAAAA,cAAc,CAACW,iBAAf,CAAiCV,IAAjC,CAAP,CACH,CAFD,IAEO,CACH,MAAOQ,CAAAA,aAAP,CACH,CACJ,C,4DAEgCR,I,CAAoB,CACjD,GAAIW,CAAAA,QAAQ,CAAGX,IAAI,CAACY,iBAAL,EAAf,CACA,GAAID,QAAQ,EAAI,CAAhB,CAAmB,CACf,MAAO,EAAP,CACH,CACD,GAAME,CAAAA,QAAQ,CAAGF,QAAQ,CAAGb,KAAK,CAACgB,YAAN,EAA5B,CACA,GAAID,QAAQ,EAAI,IAAhB,CAAsB,CAClB,sCACH,CACD,GAAIX,CAAAA,IAAI,CAAGL,MAAM,CAACM,eAAP,CAAuBU,QAAvB,CAAX,CACA,gCAAgBX,IAAhB,MACH,CAED;0DACgCF,I,CAAoB,CAChD,GAAIW,CAAAA,QAAQ,CAAGX,IAAI,CAACe,eAApB,CACA,GAAIJ,QAAQ,EAAI,CAAhB,CAAmB,CACf,MAAO,EAAP,CACH,CACD,GAAME,CAAAA,QAAQ,CAAGF,QAAQ,CAAGb,KAAK,CAACgB,YAAN,EAA5B,CACA,GAAID,QAAQ,EAAI,IAAhB,CAAsB,CAClB,sCACH,CACD,GAAIX,CAAAA,IAAI,CAAGL,MAAM,CAACM,eAAP,CAAuBU,QAAvB,CAAX,CACA,gCAAgBX,IAAhB,MACH,C,8DAEgCF,I,CAAoB,CACjD,GAAIA,IAAI,CAACgB,sBAAL,IAAiC,CAArC,CAAwC,CACpC,MAAO,EAAP,CACH,CAED,GAAIC,CAAAA,IAAI,CAAGjB,IAAI,CAACkB,wBAAL,EAAX,CACA,GAAID,IAAI,EAAI,CAAZ,CAAe,CACX,4BAAYpB,MAAM,CAACM,eAAP,CAAuB,CAACc,IAAxB,CAAZ,MACH,CAFD,IAEO,CACH,4BAAYpB,MAAM,CAACM,eAAP,CAAuBc,IAAvB,CAAZ,MACH,CACJ,C,0DAE8BjB,I,CAAoB,CAC/C,GAAMmB,CAAAA,WAAW,CAAGrB,KAAK,CAACgB,YAAN,EAApB,CACA,GAAIK,WAAW,CAAGnB,IAAI,CAACoB,eAAvB,CAAwC,CACpC,MAAO,EAAP,CACH,CAED,4BAAYvB,MAAM,CAACM,eAAP,CAAuBH,IAAI,CAACoB,eAAL,CAAuBD,WAA9C,CAAZ,iBACH,C,8BAGL,cAAepB,CAAAA,cAAf","sourcesContent":["import { Task } from '../model/model'\nimport Format from '../utils/Format'\nimport Utils from '../utils/Utils'\n\nclass TaskInfoFormat {\n\n    public static getDoingStatusTips(task: Task): string {\n        if (task.isDoing()) {\n            return \"Doingüî¥\"\n            // ‚õëüèÉ‚Äç‚ôÄÔ∏èüß† üèÑ‚Äç‚ôÇÔ∏è üåü üî¥\n        } else {\n            return \"\"\n        }\n    }\n\n    public static getConsumed(task: Task): string {\n        let time = Format.formatDuration2(task.getAllDuration());\n        if (Utils.isStringEmpty(time)) {\n            return \"\"\n        }\n        return `ËøõË°å${time}(${task.doingDurs.length}Ê¨°) `\n    }\n\n    public static getDeadline(task: Task): string {\n        const pendingStatus = TaskInfoFormat.getPendingStatus(task)\n        if (Utils.isStringEmpty(pendingStatus)) {\n            return TaskInfoFormat.getDeadlineStatus(task)\n        } else {\n            return pendingStatus\n        }\n    }\n\n    private static getDeadlineStatus(task: Task): string {\n        let deadline = task.getActualDeadline()\n        if (deadline <= 0) {\n            return \"\"\n        }\n        const leftTime = deadline - Utils.getTimestamp();\n        if (leftTime <= 1000) {\n            return `DeadÂ∑≤Ë∂ÖÊúü‚ùó `\n        }\n        let time = Format.formatDuration2(leftTime);\n        return `DeadÂâ©‰Ωô${time} `\n    }\n\n    // todo ÂêàÂπ∂ÈáçÂ§çÂáΩÊï∞\n    private static getPendingStatus(task: Task): string {\n        let deadline = task.pendingDeadline\n        if (deadline <= 0) {\n            return \"\"\n        }\n        const leftTime = deadline - Utils.getTimestamp();\n        if (leftTime <= 1000) {\n            return `PendÂ∑≤Ë∂ÖÊúü‚ùó `\n        }\n        let time = Format.formatDuration2(leftTime);\n        return `PendÂâ©‰Ωô${time} `\n    }\n\n    public static getConsumeExpected(task: Task): string {\n        if (task.getActualExpectConsume() <= 0) {\n            return \"\"\n        }\n\n        let left = task.getLeftExpectConsumeTime()\n        if (left <= 0) {\n            return `Â§öÁî®${Format.formatDuration2(-left)} `\n        } else {\n            return `ËøòË¶Å${Format.formatDuration2(left)} `\n        }\n    }\n\n    public static getStartExpected(task: Task): string {\n        const currentTime = Utils.getTimestamp()\n        if (currentTime > task.expectStartTime) {\n            return \"\"\n        }\n\n        return `ËøòÊúâ${Format.formatDuration2(task.expectStartTime - currentTime)}ÂºÄÂßã`\n    }\n}\n\nexport default TaskInfoFormat"]},"metadata":{},"sourceType":"module"}
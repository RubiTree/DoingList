{"ast":null,"code":"import { Duration } from \"../model/model\";\n\nclass DateUtils {\n  // 获得今天某个小时的时间戳\n  static getCurrentDayStamp(hour) {\n    let today = new Date();\n    today.setHours(hour, 0, 0, 0);\n    return today.getTime();\n  } // 获得某个时间戳那天某个小时的时间戳\n\n\n  static getSomeDayStamp(someStamp, hour) {\n    let day = new Date(someStamp);\n    day.setHours(hour, 0, 0, 0);\n    return day.getTime();\n  } // 获得某天偏移某个小时后的dur\n  // 暂时 offsetHour 只支持 0-24 之间的数\n\n\n  static getOffsetedDayDur(dayZeroTime, offsetHour) {\n    let day = new Date(dayZeroTime);\n    day.setHours(offsetHour, 0, 0, 0);\n    let result = new Duration();\n    result.init(day.getTime());\n    result.end = day.getTime() + DateUtils.dayMills;\n    return result;\n  } //-------------------- 以下业务相关 --------------------\n\n  /**\n   * 获得今天（是否当天按6点判断） offset 某些天的 0 点时间戳\n   */\n\n\n  static getMyCurrentDayStamp(offsetDay, dayOffset) {\n    let now = new Date().getTime(); // 今天6点\n\n    let todayOffset = DateUtils.getCurrentDayStamp(dayOffset);\n\n    if (now > todayOffset) {\n      return DateUtils.getCurrentDayStamp(0) + DateUtils.dayMills * offsetDay;\n    } else {\n      return DateUtils.getCurrentDayStamp(0) - DateUtils.dayMills + DateUtils.dayMills * offsetDay;\n    }\n  }\n  /**\n   * 获得今天（是否当天按6点判断） offset 某些天的 dur，这个某些天本身也 offset 6\n   */\n\n\n  static getMyCurrentDayDur(offsetDay) {\n    return DateUtils.getOffsetedDayDur(DateUtils.getMyCurrentDayStamp(offsetDay, DateUtils.dayOffset), DateUtils.dayOffset);\n  }\n  /**\n   * 获得今天（是否当天按0点判断） offset 某些天的 dur, 这个是0\n   */\n\n\n  static getMyCurrentDayDur2(offsetDay) {\n    return DateUtils.getOffsetedDayDur(DateUtils.getMyCurrentDayStamp(offsetDay, 0), 0);\n  }\n\n  static isSameDay(time1, time2) {\n    let day = new Date(dayZeroTime);\n  }\n\n}\n\nDateUtils.dayMills = 24 * 60 * 60 * 1000;\nDateUtils.dayOffset = 6;\nexport default DateUtils;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/utils/DateUtils.ts"],"names":["Duration","DateUtils","getCurrentDayStamp","hour","today","Date","setHours","getTime","getSomeDayStamp","someStamp","day","getOffsetedDayDur","dayZeroTime","offsetHour","result","init","end","dayMills","getMyCurrentDayStamp","offsetDay","dayOffset","now","todayOffset","getMyCurrentDayDur","getMyCurrentDayDur2","isSameDay","time1","time2"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,SAAN,CAAgB;AAIZ;AACA,SAAcC,kBAAd,CAAiCC,IAAjC,EAAuD;AACnD,QAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAeH,IAAf,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACA,WAAOC,KAAK,CAACG,OAAN,EAAP;AACH,GATW,CAWZ;;;AACA,SAAcC,eAAd,CAA8BC,SAA9B,EAAiDN,IAAjD,EAAuE;AACnE,QAAIO,GAAG,GAAG,IAAIL,IAAJ,CAASI,SAAT,CAAV;AACAC,IAAAA,GAAG,CAACJ,QAAJ,CAAaH,IAAb,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,WAAOO,GAAG,CAACH,OAAJ,EAAP;AACH,GAhBW,CAkBZ;AACA;;;AACA,SAAcI,iBAAd,CAAgCC,WAAhC,EAAqDC,UAArD,EAAmF;AAC/E,QAAIH,GAAG,GAAG,IAAIL,IAAJ,CAASO,WAAT,CAAV;AACAF,IAAAA,GAAG,CAACJ,QAAJ,CAAaO,UAAb,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AAEA,QAAIC,MAAM,GAAG,IAAId,QAAJ,EAAb;AACAc,IAAAA,MAAM,CAACC,IAAP,CAAYL,GAAG,CAACH,OAAJ,EAAZ;AACAO,IAAAA,MAAM,CAACE,GAAP,GAAaN,GAAG,CAACH,OAAJ,KAAgBN,SAAS,CAACgB,QAAvC;AACA,WAAOH,MAAP;AACH,GA5BW,CA8BZ;;AAEA;;;;;AAGA,SAAcI,oBAAd,CAAmCC,SAAnC,EAAsDC,SAAtD,EAAiF;AAC7E,QAAIC,GAAG,GAAG,IAAIhB,IAAJ,GAAWE,OAAX,EAAV,CAD6E,CAE7E;;AACA,QAAIe,WAAW,GAAGrB,SAAS,CAACC,kBAAV,CAA6BkB,SAA7B,CAAlB;;AAEA,QAAIC,GAAG,GAAGC,WAAV,EAAuB;AACnB,aAAOrB,SAAS,CAACC,kBAAV,CAA6B,CAA7B,IAAkCD,SAAS,CAACgB,QAAV,GAAqBE,SAA9D;AACH,KAFD,MAEO;AACH,aAAOlB,SAAS,CAACC,kBAAV,CAA6B,CAA7B,IAAkCD,SAAS,CAACgB,QAA5C,GAAuDhB,SAAS,CAACgB,QAAV,GAAqBE,SAAnF;AACH;AACJ;AAED;;;;;AAGA,SAAcI,kBAAd,CAAiCJ,SAAjC,EAA8D;AAC1D,WAAOlB,SAAS,CAACU,iBAAV,CAA4BV,SAAS,CAACiB,oBAAV,CAA+BC,SAA/B,EAA0ClB,SAAS,CAACmB,SAApD,CAA5B,EAA4FnB,SAAS,CAACmB,SAAtG,CAAP;AACH;AAED;;;;;AAGA,SAAcI,mBAAd,CAAkCL,SAAlC,EAA+D;AAC3D,WAAOlB,SAAS,CAACU,iBAAV,CAA4BV,SAAS,CAACiB,oBAAV,CAA+BC,SAA/B,EAA0C,CAA1C,CAA5B,EAA0E,CAA1E,CAAP;AACH;;AAED,SAAcM,SAAd,CAAwBC,KAAxB,EAAuCC,KAAvC,EAA+D;AAC3D,QAAIjB,GAAG,GAAG,IAAIL,IAAJ,CAASO,WAAT,CAAV;AACH;;AA/DW;;AAAVX,S,CACagB,Q,GAAmB,KAAK,EAAL,GAAU,EAAV,GAAe,I;AAD/ChB,S,CAEYmB,S,GAAoB,C;AAgEtC,eAAenB,SAAf","sourcesContent":["import { Duration } from \"../model/model\";\n\nclass DateUtils {\n    private static dayMills: number = 24 * 60 * 60 * 1000\n    public static dayOffset: number = 6\n\n    // 获得今天某个小时的时间戳\n    public static getCurrentDayStamp(hour: number): number {\n        let today = new Date();\n        today.setHours(hour, 0, 0, 0);\n        return today.getTime();\n    }\n\n    // 获得某个时间戳那天某个小时的时间戳\n    public static getSomeDayStamp(someStamp: number, hour: number): number {\n        let day = new Date(someStamp)\n        day.setHours(hour, 0, 0, 0)\n        return day.getTime();\n    }\n\n    // 获得某天偏移某个小时后的dur\n    // 暂时 offsetHour 只支持 0-24 之间的数\n    public static getOffsetedDayDur(dayZeroTime: number, offsetHour: number): Duration {\n        let day = new Date(dayZeroTime)\n        day.setHours(offsetHour, 0, 0, 0)\n\n        let result = new Duration()\n        result.init(day.getTime())\n        result.end = day.getTime() + DateUtils.dayMills\n        return result\n    }\n\n    //-------------------- 以下业务相关 --------------------\n\n    /**\n     * 获得今天（是否当天按6点判断） offset 某些天的 0 点时间戳\n     */\n    public static getMyCurrentDayStamp(offsetDay: number, dayOffset: number): number {\n        let now = new Date().getTime()\n        // 今天6点\n        let todayOffset = DateUtils.getCurrentDayStamp(dayOffset)\n\n        if (now > todayOffset) {\n            return DateUtils.getCurrentDayStamp(0) + DateUtils.dayMills * offsetDay\n        } else {\n            return DateUtils.getCurrentDayStamp(0) - DateUtils.dayMills + DateUtils.dayMills * offsetDay\n        }\n    }\n\n    /**\n     * 获得今天（是否当天按6点判断） offset 某些天的 dur，这个某些天本身也 offset 6\n     */\n    public static getMyCurrentDayDur(offsetDay: number): Duration {\n        return DateUtils.getOffsetedDayDur(DateUtils.getMyCurrentDayStamp(offsetDay, DateUtils.dayOffset), DateUtils.dayOffset)\n    }\n\n    /**\n     * 获得今天（是否当天按0点判断） offset 某些天的 dur, 这个是0\n     */\n    public static getMyCurrentDayDur2(offsetDay: number): Duration {\n        return DateUtils.getOffsetedDayDur(DateUtils.getMyCurrentDayStamp(offsetDay, 0), 0)\n    }\n\n    public static isSameDay(time1: number, time2: number): boolean {\n        let day = new Date(dayZeroTime)\n    }\n}\n\nexport default DateUtils"]},"metadata":{},"sourceType":"module"}
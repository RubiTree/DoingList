{"ast":null,"code":"var _jsxFileName = \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/ContentLayout.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Input, message, Button, Modal } from 'antd';\nimport stores from '../stores';\nimport Format from '../utils/Format';\nimport { CurrentTaskKey } from '../stores/CurrentTaskStore';\nimport 'antd/dist/antd.css';\nconst Container = styled.div`\n  background: #ffffff;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`;\nconst Editor = styled(Input.TextArea)`\n  flex-grow: 1;\n`;\nconst ButtonGroup = styled(Button.Group)`\nmargin: 2px;\n`;\n\nconst ContentLayout = () => {\n  const {\n    storeModel\n  } = stores.useStore('mainmodel');\n  const {\n    currentTask\n  } = stores.useStore(CurrentTaskKey);\n  const {\n    save\n  } = stores.useStore('mainmodel');\n  const [content, setContent] = useState(\"\");\n  /* ---------------------------初始化------------------------------- */\n  // 渲染当前note\n\n  const [lastTask, setLastTask] = useState(undefined);\n  useEffect(() => {\n    // console.log(`Current content:${content}`)\n    if (currentTask === undefined) return;\n\n    if (!currentTask.isSameTask(lastTask)) {\n      // todo 这里放同步应该不会有问题吧，最大的问题应该是前面切了note但没切content的时候进行保存...\n      setLastTask(currentTask);\n      setContent(currentTask.note.content);\n    }\n  });\n  /* ----------------------------保存Note文本------------------------------ */\n\n  function onBlur(event) {\n    event.preventDefault();\n    saveToLocal(event, false);\n  }\n\n  function saveToLocal(event, isManual) {\n    if (event) event.preventDefault();\n    if (currentTask === undefined) return;\n    currentTask.note.content = content;\n    save();\n    if (isManual) message.info(\"已保存\");\n  }\n  /* ---------------------------------------------------------- */\n\n\n  function deleteTask(event) {\n    if (currentTask === undefined) return;\n    Modal.confirm({\n      title: '确定要删除吗？',\n      content: `是否删除任务：${currentTask.title}`,\n\n      onOk() {\n        if (storeModel.removeTask(currentTask)) {\n          message.success(\"删除任务成功\");\n          save();\n        } else {\n          message.error(\"删除任务失败\");\n        }\n      }\n\n    });\n  }\n\n  function doneTask(event, task) {\n    if (task.isDone()) {\n      message.error(`任务已完成，完成时间:${Format.formatTimeInMs(task.doneTime)}`);\n      return;\n    }\n\n    if (!task.isDoing()) {\n      Modal.confirm({\n        title: '当前任务不在进行中，确定要完成吗？',\n        content: `是否完成任务：${task.title}`,\n\n        onOk() {\n          _realDone(task);\n        }\n\n      });\n      return;\n    }\n\n    task.stop();\n    setCurrentDoingTask(undefined);\n\n    _realDone(task);\n  }\n\n  function _realDone(task) {\n    task.done();\n    storeModel.orderTasks();\n    message.success(\"任务已完成\");\n    save();\n  }\n  /* ---------------------------------------------------------- */\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: e => deleteTask(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"D\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: e => doneTask(e, task),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: e => startTask(e, task),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Start\"), /*#__PURE__*/React.createElement(Dropdown, {\n    overlay: getMenu(task),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    style: {\n      paddingLeft: 5\n    },\n    className: \"ant-dropdown-link\",\n    onClick: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, formartLevel(task.level), \" \", /*#__PURE__*/React.createElement(DownOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 46\n    }\n  })))), /*#__PURE__*/React.createElement(Editor, {\n    placeholder: \"\\u4EFB\\u52A1\\u65E5\\u5FD7\\uFF08\\u81EA\\u52A8\\u4FDD\\u5B58\\uFF09\",\n    value: content,\n    onChange: event => setContent(event.target.value),\n    onBlur: e => onBlur(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ContentLayout;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/ContentLayout.tsx"],"names":["React","useState","useEffect","styled","Input","message","Button","Modal","stores","Format","CurrentTaskKey","Container","div","Editor","TextArea","ButtonGroup","Group","ContentLayout","storeModel","useStore","currentTask","save","content","setContent","lastTask","setLastTask","undefined","isSameTask","note","onBlur","event","preventDefault","saveToLocal","isManual","info","deleteTask","confirm","title","onOk","removeTask","success","error","doneTask","task","isDone","formatTimeInMs","doneTime","isDoing","_realDone","stop","setCurrentDoingTask","done","orderTasks","e","startTask","getMenu","paddingLeft","formartLevel","level","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Input, message, Button, Modal } from 'antd';\nimport stores from '../stores';\nimport { Task } from '../model/model'\nimport { StoreModel, Duration } from '../model/model'\nimport Utils from '../utils/Utils'\nimport DateUtils from '../utils/DateUtils'\nimport Format from '../utils/Format'\nimport { CurrentTaskKey } from '../stores/CurrentTaskStore';\nimport 'antd/dist/antd.css';\n\nconst Container = styled.div`\n  background: #ffffff;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`\n\nconst Editor = styled(Input.TextArea)`\n  flex-grow: 1;\n`\n\nconst ButtonGroup = styled(Button.Group)`\nmargin: 2px;\n`\n\nconst ContentLayout: React.FC = () => {\n  const { storeModel } = stores.useStore('mainmodel') as { storeModel: StoreModel };\n  const { currentTask } = stores.useStore(CurrentTaskKey) as { currentTask: Task | undefined }\n  const { save } = stores.useStore('mainmodel') as { save: () => void };\n  const [content, setContent] = useState(\"\")\n\n  /* ---------------------------初始化------------------------------- */\n\n  // 渲染当前note\n  const [lastTask, setLastTask] = useState<Task | undefined>(undefined)\n  useEffect(() => {\n    // console.log(`Current content:${content}`)\n    if (currentTask === undefined) return\n\n    if (!currentTask.isSameTask(lastTask)) {\n      // todo 这里放同步应该不会有问题吧，最大的问题应该是前面切了note但没切content的时候进行保存...\n      setLastTask(currentTask)\n      setContent(currentTask.note.content)\n    }\n  })\n\n  /* ----------------------------保存Note文本------------------------------ */\n\n  function onBlur(event: any) {\n    event.preventDefault();\n    saveToLocal(event, false)\n  }\n\n  function saveToLocal(event: any, isManual: boolean) {\n    if (event) event.preventDefault();\n    if (currentTask === undefined) return\n    \n    currentTask.note.content = content\n    save()\n\n    if (isManual) message.info(\"已保存\")\n  }\n\n  /* ---------------------------------------------------------- */\n\n  function deleteTask(event: any) {\n    if (currentTask === undefined) return\n\n    Modal.confirm({\n      title: '确定要删除吗？',\n      content: `是否删除任务：${currentTask.title}`,\n      onOk() {\n        if (storeModel.removeTask(currentTask)) {\n          message.success(\"删除任务成功\")\n          save()\n        } else {\n          message.error(\"删除任务失败\")\n        }\n      },\n    });\n  }\n\n  function doneTask(event: any, task: Task) {\n    if (task.isDone()) {\n      message.error(`任务已完成，完成时间:${Format.formatTimeInMs(task.doneTime)}`)\n      return\n    }\n\n    if (!task.isDoing()) {\n      Modal.confirm({\n        title: '当前任务不在进行中，确定要完成吗？',\n        content: `是否完成任务：${task.title}`,\n        onOk() {\n          _realDone(task)\n        },\n      });\n      return\n    }\n\n    task.stop()\n    setCurrentDoingTask(undefined)\n    _realDone(task)\n  }\n\n  function _realDone(task: Task) {\n    task.done()\n    storeModel.orderTasks()\n    message.success(\"任务已完成\")\n    save()\n  }\n\n  /* ---------------------------------------------------------- */\n\n  return (\n    <Container>\n      <ButtonGroup>\n              {/* 点击整行就是查看且开始，view是只查看不开始。暂时用不着吧 */}\n              {/* <Button type=\"primary\" size=\"small\">view</Button> */}\n              <Button size=\"small\" onClick={(e) => deleteTask(e)}>D</Button>\n              {/* <Button type=\"primary\" size=\"small\" onClick={(e) => startTask(e, task)}>Stop</Button> */}\n              <Button size=\"small\" onClick={(e) => doneTask(e, task)}>Done</Button>\n              <Button size=\"small\" onClick={(e) => startTask(e, task)}>Start</Button>\n\n              <Dropdown  overlay={getMenu(task)}>\n                <a style={{ paddingLeft: 5 }} className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                  {formartLevel(task.level)} <DownOutlined />\n                </a>\n              </Dropdown>\n              \n            </ButtonGroup>\n\n      <Editor\n        placeholder=\"任务日志（自动保存）\" value={content} onChange={(event) => setContent(event.target.value)} onBlur={(e) => onBlur(e)}\n      />\n    </Container>\n  );\n}\n\nexport default ContentLayout;"]},"metadata":{},"sourceType":"module"}
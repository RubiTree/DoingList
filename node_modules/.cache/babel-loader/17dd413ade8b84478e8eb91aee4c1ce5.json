{"ast":null,"code":"var _jsxFileName = \"/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TimeLineLayout.tsx\";\nimport 'reflect-metadata';\nimport React from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport { List } from 'antd';\nimport DateUtils from '../utils/DateUtils';\nimport Format from '../utils/Format';\nconst Div = styled.div`\nheight: 55vh;\noverflow-y: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:#ffffff;\n/* background-color:rgb(227, 233, 231); */\n\n::-webkit-scrollbar {\n            -webkit-appearance: none;\n            width: 7px;\n        }\n        ::-webkit-scrollbar-thumb {\n            border-radius: 4px;\n            background-color: rgba(0, 0, 0, .5);\n            box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n        }\n`;\n\nconst TimeLineLayout = () => {\n  const {\n    storeModel\n  } = stores.useStore('mainmodel'); // React.useEffect(() => {\n  //   console.log(\"app useEffect\")\n  // },[])\n\n  function getTimelines() {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0)).flatMap(task => task.note.timeLines.map(timeline => {\n      return timeline.getTitled(task.title);\n    })).sort((a, b) => {\n      if (a.timeStamp > b.timeStamp) {\n        return -1;\n      } else if (a.timeStamp < b.timeStamp) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).map(timeline => {\n      if (timeline.isDivder) {\n        return \"\";\n      } else {\n        return `${Format.formatTimeInSecond2(timeline.timeStamp)} ${timeline.content} \\n`;\n      }\n    }).join(\"\");\n  }\n\n  function getCurrentDayDoingTasks() {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0)).flatMap(task => task.note.timeLines.map(timeline => {\n      return timeline.getTitled(task.title);\n    })).sort((a, b) => {\n      if (a.timeStamp > b.timeStamp) {\n        return -1;\n      } else if (a.timeStamp < b.timeStamp) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }).filter(timeline => !timeline.isDivder);\n  }\n\n  const NoteItem = styled.div`\npadding-top:1px;\npadding-bottom:1px;\npadding-left:2px;\npadding-right:2px;\n:hover{\nbackground-color: #f5b52b;\n};\nbackground-color:rgb(227, 233, 231)\n`;\n  return /*#__PURE__*/React.createElement(Div, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    size: \"small\",\n    bordered: true,\n    dataSource: getCurrentDayDoingTasks(),\n    renderItem: timeline => /*#__PURE__*/React.createElement(NoteItem, {\n      key: timeline.timeStamp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#0295d2\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, Format.formatTimeInSecond2(timeline.timeStamp)), \" \", timeline.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TimeLineLayout;","map":{"version":3,"sources":["/Users/bear/Develop/vscode/self/study/study1/React/DoingList/doinglist2/src/layouts/TimeLineLayout.tsx"],"names":["React","styled","stores","List","DateUtils","Format","Div","div","TimeLineLayout","storeModel","useStore","getTimelines","getTasks","getMyCurrentDayDur","flatMap","task","note","timeLines","map","timeline","getTitled","title","sort","a","b","timeStamp","isDivder","formatTimeInSecond2","content","join","getCurrentDayDoingTasks","filter","NoteItem","color"],"mappings":";AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAIA,MAAMC,GAAG,GAAGL,MAAM,CAACM,GAAI;;;;;;;;;;;;;;;;;CAAvB;;AAmBA,MAAMC,cAAwB,GAAG,MAAM;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAiBP,MAAM,CAACQ,QAAP,CAAgB,WAAhB,CAAvB,CADqC,CAGrC;AACA;AACA;;AAEA,WAASC,YAAT,GAAgC;AAC9B,WAAOF,UAAU,CAACG,QAAX,CAAoBR,SAAS,CAACS,kBAAV,CAA6B,CAA7B,CAApB,EACJC,OADI,CACKC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBC,GAApB,CAAyBC,QAAD,IAAc;AACvD,aAAOA,QAAQ,CAACC,SAAT,CAAmBL,IAAI,CAACM,KAAxB,CAAP;AACD,KAFkB,CADd,EAGDC,IAHC,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjB,UAAID,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AAC7B,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AACpC,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KAXI,EAaJP,GAbI,CAaCC,QAAD,IAAc;AACjB,UAAIA,QAAQ,CAACO,QAAb,EAAuB;AACrB,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAQ,GAAErB,MAAM,CAACsB,mBAAP,CAA2BR,QAAQ,CAACM,SAApC,CAA+C,IAAGN,QAAQ,CAACS,OAAQ,KAA7E;AACD;AACF,KAnBI,EAmBFC,IAnBE,CAmBG,EAnBH,CAAP;AAoBD;;AAED,WAASC,uBAAT,GAA+C;AAC7C,WAAOrB,UAAU,CAACG,QAAX,CAAoBR,SAAS,CAACS,kBAAV,CAA6B,CAA7B,CAApB,EACJC,OADI,CACKC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBC,GAApB,CAAyBC,QAAD,IAAc;AACvD,aAAOA,QAAQ,CAACC,SAAT,CAAmBL,IAAI,CAACM,KAAxB,CAAP;AACD,KAFkB,CADd,EAGDC,IAHC,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjB,UAAID,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AAC7B,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AACpC,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF,KAXI,EAYHM,MAZG,CAYKZ,QAAD,IAAc,CAACA,QAAQ,CAACO,QAZ5B,CAAP;AAaD;;AAED,QAAMM,QAAQ,GAAG/B,MAAM,CAACM,GAAI;;;;;;;;;CAA5B;AAWA,sBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,UAAU,EAAEuB,uBAAuB,EAHrC;AAIE,IAAA,UAAU,EAAEX,QAAQ,iBAClB,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,QAAQ,CAACM,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC5B,MAAM,CAACsB,mBAAP,CAA2BR,QAAQ,CAACM,SAApC,CAApC,CADF,OAC8FN,QAAQ,CAACS,OADvG,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAcD,CAvED;;AAyEA,eAAepB,cAAf","sourcesContent":["import 'reflect-metadata'\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport stores from '../stores';\nimport { List } from 'antd';\nimport { StoreModel, Task, Duration, TimeLine } from '../model/model'\nimport DateUtils from '../utils/DateUtils'\nimport Format from '../utils/Format'\nimport TimelineItem from 'antd/lib/timeline/TimelineItem';\n\n\nconst Div = styled.div`\nheight: 55vh;\noverflow-y: scroll;\nwhite-space: pre-wrap;\npadding: 5px;\nbackground-color:#ffffff;\n/* background-color:rgb(227, 233, 231); */\n\n::-webkit-scrollbar {\n            -webkit-appearance: none;\n            width: 7px;\n        }\n        ::-webkit-scrollbar-thumb {\n            border-radius: 4px;\n            background-color: rgba(0, 0, 0, .5);\n            box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n        }\n`\n\nconst TimeLineLayout: React.FC = () => {\n  const { storeModel } = stores.useStore('mainmodel') as { storeModel: StoreModel };\n\n  // React.useEffect(() => {\n  //   console.log(\"app useEffect\")\n  // },[])\n\n  function getTimelines(): string {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0))\n      .flatMap((task) => task.note.timeLines.map((timeline) => {\n        return timeline.getTitled(task.title)\n      })).sort((a, b) => {\n        if (a.timeStamp > b.timeStamp) {\n          return -1\n        } else if (a.timeStamp < b.timeStamp) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n      )\n      .map((timeline) => {\n        if (timeline.isDivder) {\n          return \"\"\n        } else {\n          return `${Format.formatTimeInSecond2(timeline.timeStamp)} ${timeline.content} \\n`\n        }\n      }).join(\"\")\n  }\n\n  function getCurrentDayDoingTasks(): TimeLine[] {\n    return storeModel.getTasks(DateUtils.getMyCurrentDayDur(0))\n      .flatMap((task) => task.note.timeLines.map((timeline) => {\n        return timeline.getTitled(task.title)\n      })).sort((a, b) => {\n        if (a.timeStamp > b.timeStamp) {\n          return -1\n        } else if (a.timeStamp < b.timeStamp) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n      ).filter((timeline) => !timeline.isDivder)\n  }\n\n  const NoteItem = styled.div`\npadding-top:1px;\npadding-bottom:1px;\npadding-left:2px;\npadding-right:2px;\n:hover{\nbackground-color: #f5b52b;\n};\nbackground-color:rgb(227, 233, 231)\n`\n\n  return (\n    <Div>\n      <List\n        size=\"small\"\n        bordered\n        dataSource={getCurrentDayDoingTasks()}\n        renderItem={timeline => (\n          <NoteItem key={timeline.timeStamp} >\n            <span style={{ color: \"#0295d2\" }}>{Format.formatTimeInSecond2(timeline.timeStamp)}</span> {timeline.content}\n          </NoteItem>\n        )}\n      />\n    </Div>\n  );\n}\n\nexport default TimeLineLayout;\n"]},"metadata":{},"sourceType":"module"}
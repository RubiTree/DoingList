{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TransformOperationExecutor_1 = require(\"./TransformOperationExecutor\");\n\nvar ClassTransformer =\n/** @class */\nfunction () {\n  function ClassTransformer() {}\n\n  ClassTransformer.prototype.classToPlain = function (object, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_PLAIN, options || {});\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToPlainFromExist = function (object, plainObject, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_PLAIN, options || {});\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClass = function (cls, plain, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.PLAIN_TO_CLASS, options || {});\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClassFromExist = function (clsObject, plain, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.PLAIN_TO_CLASS, options || {});\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClass = function (object, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_CLASS, options || {});\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClassFromExist = function (object, fromObject, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_CLASS, options || {});\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.serialize = function (object, options) {\n    return JSON.stringify(this.classToPlain(object, options));\n  };\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserialize = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserializeArray = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n\n  return ClassTransformer;\n}();\n\nexports.ClassTransformer = ClassTransformer;","map":{"version":3,"sources":["../../src/ClassTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import {ClassTransformOptions} from \"./ClassTransformOptions\";\nimport {TransformOperationExecutor, TransformationType} from \"./TransformOperationExecutor\";\n\nexport type ClassType<T> = {\n    new (...args: any[]): T;\n};\n\nexport class ClassTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n     */\n    classToPlain<T extends Object>(object: T, options?: ClassTransformOptions): Object;\n    classToPlain<T extends Object>(object: T[], options?: ClassTransformOptions): Object[];\n    classToPlain<T extends Object>(object: T|T[], options?: ClassTransformOptions): Object|Object[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to plain (literal) object.\n     * Uses given plain object as source object (it means fills given plain object with data from class object).\n     * Also works with arrays.\n     */\n    classToPlainFromExist<T extends Object, P>(object: T, plainObject: P, options?: ClassTransformOptions): T;\n    classToPlainFromExist<T extends Object, P>(object: T, plainObjects: P[], options?: ClassTransformOptions): T[];\n    classToPlainFromExist<T extends Object, P>(object: T, plainObject: P|P[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n     */\n    plainToClass<T extends Object, V extends Array<any>>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T[];\n    plainToClass<T extends Object, V>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T;\n    plainToClass<T extends Object, V>(cls: ClassType<T>, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts plain (literal) object to class (constructor) object.\n     * Uses given object as source object (it means fills given object with data from plain object).\n     * Also works with arrays.\n     */\n    plainToClassFromExist<T extends Object, V extends Array<any>>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\n    plainToClassFromExist<T extends Object, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T[];\n    plainToClassFromExist<T extends Object, V>(clsObject: T, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n     */\n    classToClass<T>(object: T, options?: ClassTransformOptions): T;\n    classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\n    classToClass<T>(object: T|T[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to plain (literal) object.\n     * Uses given plain object as source object (it means fills given plain object with data from class object).\n     * Also works with arrays.\n     */\n    classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\n    classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\n    classToClassFromExist<T>(object: T, fromObject: T|T[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Serializes given object to a JSON string.\n     */\n    serialize<T>(object: T, options?: ClassTransformOptions): string;\n    serialize<T>(object: T[], options?: ClassTransformOptions): string;\n    serialize<T>(object: T|T[], options?: ClassTransformOptions): string {\n        return JSON.stringify(this.classToPlain(object, options));\n    }\n\n    /**\n     * Deserializes given JSON string to a object of the given class.\n     */\n    deserialize<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T {\n        const jsonObject: T = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n\n    /**\n     * Deserializes given JSON string to an array of objects of the given class.\n     */\n    deserializeArray<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T[] {\n        const jsonObject: any[] = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n\n}\n"],"sourceRoot":"."},"metadata":{},"sourceType":"script"}